# Canvas 项目代码规范和扫描规则

## 🎯 项目概述

这是一个基于 React + TypeScript 的 Canvas 画布应用，包含页面管理、节点系统、渲染循环等核心功能。

## 📋 代码质量规则

### TypeScript 最佳实践

- 所有函数必须有明确的返回类型声明
- 禁止使用`any`类型，必须使用具体类型或泛型
- 所有接口和类型必须有 JSDoc 注释说明用途
- 导出的公共 API 必须有完整的类型定义

### React 组件规范

- 组件必须使用函数式组件和 Hooks
- Props 接口必须以组件名+Props 命名（如：PagePanelProps）
- 组件内部状态变更必须通过 setter 函数，不可直接修改
- 所有事件处理函数必须以 handle 开头（如：handlePageSwitch）

### 命名规范

- 文件名使用 camelCase（组件文件可使用 PascalCase）
- 常量使用 UPPER_SNAKE_CASE
- 私有方法/属性以下划线开头
- 枚举类型使用 PascalCase
- 接口使用 PascalCase 并以 Interface 结尾（可选）

## 🏗️ 架构规范

### 目录结构规则

- `/src/core/` - 核心业务逻辑，不可依赖 UI 组件
- `/src/components/` - React 组件，可依赖 core 但不可跨组件直接依赖
- `/src/mock/` - 测试数据，只能被开发环境使用
- `/src/utils/` - 纯函数工具，不可有副作用

### 依赖规则

- 核心模块(core)不能导入 React 相关依赖
- 组件不能直接访问其他组件的内部状态
- 工具函数必须是纯函数，无副作用
- Mock 数据不能出现在生产构建中

### 模块导出规则

- 每个目录必须有 index.ts 作为统一导出入口
- 不允许默认导出，优先使用命名导出
- 公共 API 必须通过 index.ts 导出
- 内部实现细节不可对外暴露

## ⚡ 性能规则

### 渲染优化

- 所有 React 组件必须使用 memo 优化（如需要）
- 事件处理函数必须使用 useCallback 缓存
- 昂贵计算必须使用 useMemo 缓存
- 避免在 render 中创建新对象或函数

### Canvas 性能

- 渲染函数必须避免频繁的上下文切换
- 大量图形元素必须使用批量绘制
- 避免在动画循环中进行 DOM 操作
- 图片资源必须预加载和缓存

### 内存管理

- 事件监听器必须在组件卸载时清理
- 定时器和动画循环必须正确销毁
- 大对象使用后必须显式清理引用
- 避免内存泄漏的订阅模式

## 🔒 安全和错误处理

### 错误边界

- 所有异步操作必须有错误处理
- React 组件必须有错误边界保护
- 用户输入必须验证和清理
- 外部数据必须类型检查

### 数据验证

- 所有用户输入必须验证
- API 响应数据必须类型校验
- 配置参数必须有默认值
- 边界条件必须有保护逻辑

## 📊 业务逻辑规则

### 页面管理

- 页面切换必须通过 PageManager 统一管理
- 页面状态变更必须触发数据观察者通知
- 不能直接修改页面的子节点数组，必须使用 addChild/removeChild
- 页面删除时必须检查是否为最后一个页面

### 节点系统

- 所有节点必须继承自 BaseNode
- 节点创建必须通过 NodeTree 管理
- 节点状态变更必须通知渲染系统
- 节点 ID 必须全局唯一

### 渲染循环

- 渲染函数必须是纯函数，无副作用
- 数据变更必须通过 globalDataObserver 通知
- 避免在渲染循环中进行状态更新
- 渲染错误必须被捕获和处理

# 注意

不允许帮我 pnpm run dev 和 build
